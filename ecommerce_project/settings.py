"""
Django settings for ecommerce_project project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import logging # Ensure logging is imported

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-_!nbm)+$i%j%e__w0r_67&u%#i-zg!cqt+o@k^f@(i_wa5@kft"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    'localhost', '127.0.0.1', '172.20.10.2', '192.168.137.1', '0.0.0.0',
    '*',  # Allow all hosts in development - REMOVE IN PRODUCTION!
]

# Special setting for Channels/Daphne
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:8000', 'http://localhost:9000', 'http://127.0.0.1:9000']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Third-party apps
    'crispy_forms',
    'crispy_bootstrap5',
    'django_extensions',
    'social_django',  # Add social authentication
    'channels',  # Add Django Channels
    # Custom apps
    'store',  # Add our store app
    'custom_admin',  # Add this line
    'livechat',  # Add the live chat app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "store.middleware.InactiveUserMiddleware",  # Add our middleware after auth
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    'social_django.middleware.SocialAuthExceptionMiddleware',  # Add social auth middleware
    'livechat.middleware.ChatXFrameOptionsMiddleware',  # Add chat frame options middleware
]

# Set X-Frame-Options to SAMEORIGIN to allow iframes on the same site
X_FRAME_OPTIONS = 'SAMEORIGIN'

ROOT_URLCONF = "ecommerce_project.urls"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],  # Make sure this line exists
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'store.context_processors.categories',
                'store.context_processors.cart_processor',
                'store.context_processors.notifications_processor',
                'custom_admin.context_processors.crm_context',
                'social_django.context_processors.backends',  # Add social auth context processor
                'social_django.context_processors.login_redirect',  # Add social auth context processor
                'livechat.context_processors.floating_chat_processor',  # Add floating chat context processor
            ],
        },
    },
]


WSGI_APPLICATION = "ecommerce_project.wsgi.application"
ASGI_APPLICATION = "ecommerce_project.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.mysql",
        "NAME": "ecommerce_db",
        "USER": "root",
        "PASSWORD": "",
        "HOST": "localhost",
        "PORT": "3306",
        "OPTIONS": {
            "init_command": "SET sql_mode='STRICT_TRANS_TABLES'",
            "charset": "utf8mb4",
        }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Media files configuration
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
# Add the following for development
import os

if DEBUG:
    # Show static files in development
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'static'),
    ]
    

# Authentication settings
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'home'  # Redirect to homepage after login
LOGOUT_REDIRECT_URL = 'home'  # Redirect to homepage after logout

# Crispy Forms settings
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Email Settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
# Replace these with environment variables in production
EMAIL_HOST_USER = 'your.email@example.com'
EMAIL_HOST_PASSWORD = 'your-app-password'
DEFAULT_FROM_EMAIL = 'E-Shop <your.email@example.com>'

# Social Auth Settings
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'store.views.ActiveUserBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# Google OAuth2 settings
# To set up Google OAuth2:
# 1. Go to https://console.cloud.google.com/
# 2. Create a new project
# 3. Go to APIs & Services > Credentials
# 4. Create OAuth client ID
# 5. Configure consent screen
# 6. Create Web application credentials
# 7. Set up the credentials properly:
#    - For "Authorized JavaScript origins" add:
#        http://localhost:8000
#        http://127.0.0.1:8000
#        http://192.168.137.1:8000
#        http://172.20.10.2:8000
#    - For "Authorized redirect URIs" add:
#        http://localhost:8000/social-auth/complete/google-oauth2/
#        http://127.0.0.1:8000/social-auth/complete/google-oauth2/
#        http://192.168.137.1:8000/social-auth/complete/google-oauth2/
#        http://172.20.10.2:8000/social-auth/complete/google-oauth2/
# Replace these with environment variables in production
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'your-google-oauth2-client-id'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'your-google-oauth2-client-secret'
SOCIAL_AUTH_GOOGLE_OAUTH2_SCOPE = [
    'https://www.googleapis.com/auth/userinfo.email',
    'https://www.googleapis.com/auth/userinfo.profile',
]

# Additional settings for Google OAuth
SOCIAL_AUTH_GOOGLE_OAUTH2_USE_UNIQUE_USER_ID = True
SOCIAL_AUTH_GOOGLE_OAUTH2_EXTRA_DATA = ['email', 'first_name', 'last_name', 'picture']
SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS = {
    'access_type': 'offline',
    'prompt': 'consent',
    'include_granted_scopes': 'true',  # Include all granted scopes
    'mobile': 'false',  # Tell Google not to use mobile optimized flow
    'redirect_mode': 'query'  # Use query parameters for redirects instead of fragments
}

# Fix OAuth state issues
SOCIAL_AUTH_FIELDS_STORED_IN_SESSION = ['state']
SOCIAL_AUTH_REDIRECT_IS_HTTPS = False  # Set to True if using HTTPS

# Social Auth Pipeline
SOCIAL_AUTH_PIPELINE = (
    'social_core.pipeline.social_auth.social_details',
    'social_core.pipeline.social_auth.social_uid',
    'social_core.pipeline.social_auth.auth_allowed',
    'social_core.pipeline.social_auth.social_user',
    'social_core.pipeline.user.get_username',
    'store.social_auth.associate_by_email',  # Custom function to associate by email
    'store.social_auth.create_user',  # Custom function to create user
    'social_core.pipeline.social_auth.associate_user',
    'social_core.pipeline.social_auth.load_extra_data',
    'store.social_auth.get_profile_picture',  # Custom function to get profile picture
    'social_core.pipeline.user.user_details',
)

# Social Auth Login URLs
SOCIAL_AUTH_LOGIN_REDIRECT_URL = '/'
SOCIAL_AUTH_LOGIN_ERROR_URL = '/social-auth-error/'
SOCIAL_AUTH_RAISE_EXCEPTIONS = False

# User creation settings
SOCIAL_AUTH_CREATE_USERS = True
SOCIAL_AUTH_USERNAME_IS_FULL_EMAIL = True
SOCIAL_AUTH_SANITIZE_REDIRECTS = True

# Email settings for user creation
SOCIAL_AUTH_EMAIL_VALIDATION_FUNCTION = 'social_core.pipeline.user.get_username'
SOCIAL_AUTH_EMAIL_VALIDATION_METHOD = 'optional'

# Channel layers for Django Channels
CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels.layers.InMemoryChannelLayer',
        # Use Redis backend in production
        # 'BACKEND': 'channels_redis.core.RedisChannelLayer',
        # 'CONFIG': {
        #     "hosts": [('127.0.0.1', 6379)],
        # },
    },
}

# Configure Logging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '[{levelname}] {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'DEBUG', # Capture DEBUG and higher levels
            'class': 'logging.StreamHandler',
            'formatter': 'verbose', # Use verbose format for console
        },
        # You could add a file handler here if needed:
        # 'file': {
        #     'level': 'INFO',
        #     'class': 'logging.FileHandler',
        #     'filename': BASE_DIR / 'debug.log',
        #     'formatter': 'verbose',
        # },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO', # Show Django's INFO messages
            'propagate': False,
        },
        'django.db.backends': { # Silence noisy database logs unless ERROR
            'handlers': ['console'],
            'level': 'ERROR',
            'propagate': False,
        },
        'store': { # Logger for your store app
            'handlers': ['console'],
            'level': 'INFO', # Capture INFO messages from your app
            'propagate': False, # Don't send to root logger if handled here
        },
        'custom_admin': { # Logger for your custom_admin app
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
         'livechat': { # Logger for your livechat app
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
         'social_django': { # Logger for social_django
            'handlers': ['console'],
            'level': 'DEBUG', # Set to DEBUG for detailed social auth logs
            'propagate': False,
        },
         'celery': { # Logger for Celery tasks
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
    # Root logger: Catches logs not handled by specific loggers
    'root': {
        'handlers': ['console'],
        'level': 'WARNING', # Set default level for other apps
    },
}

# Celery Configuration
CELERY_BROKER_URL = 'redis://localhost:6379/0'  # Change this if needed
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'  # Change this if needed
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

# Celery Beat Schedule for periodic tasks
CELERY_BEAT_SCHEDULE = {
    'check_anniversary_vouchers': {
        'task': 'custom_admin.tasks.check_anniversary_vouchers',
        'schedule': 86400.0,  # Execute once per day (in seconds)
    },
}
    